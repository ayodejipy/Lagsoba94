@using UnidecodeSharpFork
@model Lagsoba94.Models.EditProfile

@*Croppie for cropping images*@
<link href="~/Content/croppie.css" rel="stylesheet" />

@*style for choosing profile image*@
<link href="~/Content/assets/css/ProfileImage.css" rel="stylesheet" />

<div class="container pt-25 mt-5">
    <form action="/profile/edit-profile/" method="post" class="form" id="form" novalidate="novalidate">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model=>model.UserId)

        <div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        </div>

        <!-- Row -->
        <div class="row">
            <div class="col-lg-3 col-xs-12">
                <div class="profile-box">
                    <div class="profile-info text-center">
                        <div class="profile-img-wrap">


                            @Html.HiddenFor(model => model.ImageString)

                            <div class="upload-demo">
                                <input type="file" id="upload" value="Choose a file" accept="image/*" data-role="none" />
                                <div style="margin: 0 auto;display:table;">
                                    <img id="image" class="inline-block mb-10" src="@Model.ImageString" alt="@Model.FirstName">

                                    <div id="upload-demo"></div>

                                    <em class="text-info mb-3 text-center">(Scale image to your prefrrence before submitting)</em>

                                    <span id="imgError" style="display:none;" class="text-danger"><em>Image selected is too large, max file size is 2MB</em></span>
                                </div>
                            </div>

                            <button type="button" id="changeImage" class="btn btn-info mt-3">Change Profile Image</button>
                            <button type="button" id="removeImage" class="btn btn-danger mt-3">Remove Profile Image</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-8 mx-4">
                <div class="profile-name mt-2">
                    <strong>Profile</strong>
                    <textarea class="form-control" cols="20" id="Profile" name="Profile" rows="10">@Model.Profile</textarea>
                    @Html.ValidationMessageFor(model => model.Profile, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <!-- /Row -->
        <!-- Row -->
        <div class="row mt-3">
            <div class="col-lg-12 col-xs-12">
                <div class="row profile-detail my-3">
                    <div class="col-md-6">
                        <table class="table">
                            <tbody>
                                <tr>
                                    <td><strong>Title</strong></td>
                                    <td>
                                        @Html.DropDownListFor(m => m.Title, new SelectList(Model.TitleList, "Value", "Text"), "", new { @class = "form-control show" })
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </td>
                                </tr>

                                <tr>
                                    <td><strong>First Name</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Last Name</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Other Names</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.OtherNames, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.OtherNames, "", new { @class = "text-danger" })
                                    </td>
                                </tr>

                                <tr>
                                    <td><strong>Gender</strong></td>
                                    <td>
                                        @Html.DropDownListFor(m => m.Gender, new SelectList(Model.GenderList, "Value", "Text"), "", new { @class = "form-control show" })
                                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                    </td>
                                </tr>

                                <tr>
                                    <td><strong>Profession</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.Profession, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Profession, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Date of Birth</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })

                                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="col-md-6">
                        <table class="table">
                            <tbody>
                                <tr>
                                    <td><strong>Email</strong></td>
                                    <td>
                                        <input class="form-control text-box single-line" type="text" value=@Model.Email readonly />
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Phone</strong></td>
                                    <td>
                                        <div class="input-group mb-3 ">
                                            <div class="w-50 input-group-prepend ">
                                                <select class="w-100 input-group-text show" data-val="true" data-val-required="Please select a country for your phone from the dropdown" id="CountryCodeSelected" name="CountryCodeSelected">
                                                    <option>-- Country Code --</option>
                                                </select>
                                            </div>
                                            @Html.EditorFor(model => model.PhoneNumberRaw, new { htmlAttributes = new { @class = "w-1 multisteps-form__input form-control text-box single-line" } })
                                            @*<input class="w-1 multisteps-form__input form-control text-box single-line" data-val="true" data-val-required="Your phone number is required" id="PhoneNumberRaw" name="PhoneNumberRaw" type="text" disabled value="">*@

                                        </div>

                                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                    </td>
                                </tr>

                                <tr>
                                    <td><strong>Address</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>City</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Country & State</strong></td>
                                    <td>
                                        <div class="input-group mb-3 ">
                                            <div class="w-50 input-group-prepend ">
                                                <select class="w-100 input-group-text show" id="Country" name="Country">
                                                    <option> -- Select Country --</option>
                                                </select>
                                            </div>
                                            <select class="w-1 multisteps-form__input form-control show" id="State" name="State" disabled>
                                                <option> -- Select State --</option>
                                            </select>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Zip</strong></td>
                                    <td>
                                        @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <div>
                            <div class="text-right">
                                <input type="button" id="saveChanges" value="Save Changes" class="btn btn-primary mr-3" />
                                <input type="button" id="cancel" value="Cancel" class="btn btn-secondary" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /Row -->
    </form>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

    @*Javascript plugin for croppie*@
    <script src="~/Scripts/croppie.js"></script>

    <script>
        $(document).ready(function () {
            // activates the gender select list and set date limits
            (function () {
                $('.nice-select').remove();

                var today = new Date();
                var limitDay = new Date();
                limitDay.setFullYear(today.getFullYear() - 39);

                var ne = formatDate(limitDay);
                document.getElementById("DOB").setAttribute("max", ne);


                // POPULATE COUNTRY LIST
                // CREATE AN XMLHttpRequest OBJECT, WITH GET METHOD.
                var xhr = new XMLHttpRequest(),
                    method = 'GET',
                    overrideMimeType = 'application/json',
                    url = '/content/assets/countrycodes.json';

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {

                        // PARSE JSON DATA.
                        var country = JSON.parse(xhr.responseText);

                        var ele = document.getElementById('CountryCodeSelected');

                        for (var i = 0; i < country.data.length; i++) {

                            // BIND DATA TO <select> ELEMENT.
                            if(country.data[i].dial_code == '@ViewBag.PhoneCountryCode') {
                                    ele.innerHTML = ele.innerHTML +
                                        '<option value="' + country.data[i].code + '" selected="selected">' + country.data[i].name + " (" + country.data[i].dial_code + ')</option>';
                             }else{
                                 ele.innerHTML = ele.innerHTML +
                                        '<option value="' + country.data[i].code + '">' + country.data[i].name + " (" + country.data[i].dial_code + ')</option>';
                             }
                        }
                    }
                };
                xhr.open(method, url, true);
                xhr.send();



                // populate country for address list
                var countryStates = new XMLHttpRequest(),
                    stateMethod = 'GET',
                    stateOverrideMimeType = 'application/json',
                    stateUrl = '/content/assets/countrieswithstates.json';

                countryStates.onreadystatechange = function () {
                    if (countryStates.readyState === XMLHttpRequest.DONE && countryStates.status === 200) {

                        // PARSE JSON DATA.
                        var stateCountries = JSON.parse(countryStates.responseText);

                        var countryElement = document.getElementById('Country');
                        for (var i = 0; i < stateCountries.data.length; i++) {

                            // BIND DATA TO <select> ELEMENT.
                            if (stateCountries.data[i].name == '@Model.Country.ToString().Unidecode()') {
                                 countryElement.innerHTML = countryElement.innerHTML +
                                    '<option value="' + stateCountries.data[i].name + '" selected="selected">' + stateCountries.data[i].name + '</option>';

                                // populate state
                                 $.ajax({
                                    type: "GET",
                                    url: "/account/country-states/",
                                    cache: false,
                                    data: { countryName: '@Model.Country.ToString().Unidecode()' },
                                    success: function (result) {
                                        // clear state dropdown
                                        $('#State')
                                            .empty()
                                            //.append('<option> -- Select State --</option>')

                                        // PARSE JSON DATA.
                                        var states = JSON.parse(result.data);

                                        var stateElement = document.getElementById('State');
                                        for (var i = 0; i < states.length; i++) {

                                            // BIND DATA TO <select> ELEMENT.
                                            if (stateCountries.data[i].name == '@ViewBag.State') {
                                                stateElement.innerHTML = stateElement.innerHTML +
                                                    '<option value="' + states[i].name + '" selected="selected">' + states[i].name + '</option>';
                                            } else {
                                                stateElement.innerHTML = stateElement.innerHTML +
                                                    '<option value="' + states[i].name + '">' + states[i].name + '</option>';
                                            }
                                        }

                                        $('#State').prop('disabled', false);
                                    },
                                    failure: function () {
                                    }
                                })

                            } else {
                                countryElement.innerHTML = countryElement.innerHTML +
                                    '<option value="' + stateCountries.data[i].name + '">' + stateCountries.data[i].name + '</option>';
                            }
                        }
                    }
                };
                countryStates.open(stateMethod, stateUrl, true);
                countryStates.send();
            })()

            function formatDate(date) {
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;

                return [year, month, day].join('-');
            }

            $('#CountryCodeSelected').on('change', function () {
                var code = $(this).children("option:selected").val();

                // check if selectedCountry is empty
                if (code == "" || code == code || selectedCountry == "-- Select Country --") {
                    $('#PhoneNumberRaw').prop('disabled', false);
                } else {
                    $('#PhoneNumberRaw').prop('disabled', 'disabled');
                }
            })

            $('#Country').on('change', function () {
                var selectedCountry = $(this).children("option:selected").val();

                // check if selectedCountry is empty
                if (selectedCountry == "" || selectedCountry == null || selectedCountry == "-- Country Code --") {
                    $('#State').prop('disabled', 'disabled');
                    return;
                }

                // perform an ajax get to get all corresponding states
                $.ajax({
                    type: "GET",
                    url: "/account/country-states/",
                    cache: false,
                    data: { countryName: selectedCountry },
                    success: function (result) {
                        // clear state dropdown
                        $('#State')
                            .empty()
                            //.append('<option selected="selected"> -- Select State --</option>')

                        // PARSE JSON DATA.
                        var states = JSON.parse(result.data);

                        var stateElement = document.getElementById('State');
                        for (var i = 0; i < states.length; i++) {

                            // BIND DATA TO <select> ELEMENT.
                            stateElement.innerHTML = stateElement.innerHTML +
                                '<option value="' + states[i].name + '">' + states[i].name + '</option>';
                        }

                        $('#State').prop('disabled', false);
                    },
                    failure: function () {
                    }
                })

            })

            var $uploadCrop
            $("#changeImage").click(function () {
                 $('.upload-demo').removeClass('ready')
                $('#upload-demo').removeClass()
                $('.fa-check').removeClass('show');
                $('#ImageString').attr('value', '')

                // remove all div in the upload-demo element
                let menu = document.getElementById('upload-demo');
                while (menu.firstChild) {
                    menu.removeChild(menu.firstChild);
                }

                $('#upload').val('') // this will clear the input val.
                $uploadCrop = null;

                // trigger the file browser
                $("#upload").click()
            })

            function readFile(input) {
                $uploadCrop = $("#upload-demo").croppie({
                    viewport: {
                        width: 263,
                        height: 339,
                        type: 'square'
                    },
                    boundary: {
                        width: 300,
                        height: 400
                    },
                    enforceBoundary: true,
                    showZoomer: true
                });

                if (input.files && input.files[0]) {
                    if (/^image/.test(input.files[0].type)) { // only image file
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $uploadCrop.croppie('bind', {
                                url: e.target.result
                            });
                            $('.upload-demo').addClass('ready');
                        }
                        reader.readAsDataURL(input.files[0]);
                    } else {
                        alert("You may only select image files");
                    }
                } else {
                    alert("Sorry - your browser doesn't support FileReader API");
                }
            }

            // read image upload file
            $('#upload').on('change', function () {
                $('#imgError').hide('slow')
                $('#image').hide('slow')
                readFile(this)
            })

            $('#saveChanges').on('click', function () {
                event.preventDefault()

                // submit form if image is none
                if ($uploadCrop == null) {
                    $('.form').submit()
                }

                $uploadCrop.croppie('result', {
                    type: 'base64',
                    size: 'viewport',
                    format: 'jpeg',
                    quality: 0.99
                }).then(function (resp) {
                    $('#ImageString').attr('value', resp)

                    // submit form
                    $('.form').submit()
                })


            })

            //this reset the image selector
            $("#removeImage").click(function () {

                $('.upload-demo').removeClass('ready')
                $('#upload-demo').removeClass()
                $('#ImageString').attr('value', '')

                // remove all div in the upload-demo element
                let menu = document.getElementById('upload-demo');
                while (menu.firstChild) {
                    menu.removeChild(menu.firstChild);
                }

                $('#upload').val('') // this will clear the croppie input val.
                $uploadCrop = null;

                $('#image').hide('slow')
            })

        })
    </script>
}
